T-> INT
T-> CHAR
T-> BOOL
T-> FLOAT
T-> DOUBLE
C-> IF
C-> ELSE
C-> IFELSE
CR-> WHILE
CR-> DO
P-> CIN
P-> COUT
PC->PUNT_COMA
CA-> COMA
main-> MAIN
return-> RETURN
PD->PARENT_FIN
PZ->PARENT_INICIO
LD->LL_FIN
LZ->LL_INICIO
FE-> FLUJO_ENTRADA
FS-> FLUJO_SALIDA
salto->ENDL
D->0
D->1
D->2
D->3
D->4
D->5
D->6
D->7
D->8
D->9
NUM-> NUM PUNTO NUM
sigoper->OPER_SUM
sigoper->OPER_RESTA
sigoper->OPER_MUL
sigoper->OPER_DIV
siglogica->CONDI_AND
siglogica->CONDI_OR
sigcomp-> SIG_MENOR
sigcomp-> SIG_MAYOR
sigcomp-> OPER_IGUALDAD
sigcomp-> SIG_MENORIGUAL
sigcomp-> SIG_MAYORIGUAL
sigcomp-> OPER_DIFER
variable-> CHAR OPER_SUMA CHAR
programa-> inicio
inicio-> T main PZ PD LZ bloque return D PC LD
bloque-> sentencia bloque
bloque-> sentencia
bloque-> ''
sentencia-> leer
sentencia-> escribir
sentencia-> declaracion
sentencia-> OP
sentencia-> si
sentencia-> mientras
sentencia-> hacermientras
leer         -> P FE listaleer PC
listaleer    -> variable
listaleer    -> variable masvariable
masvariable  -> variable masvariable  
masvariable  -> ''
escribir      ->P FS L PC
L ->F
L ->F FS L
F -> cadena
F -> variable
F -> G
F -> salto
OP ->NUM = G PC
NUM ->D MD
NUM ->D MD PUNTO MD
MD ->D MD
MD ->''
G ->( base ) 
G ->base
G ->G sigoper base
G ->base sigoper G
base ->valor operacioneres valor
base ->valor operacioneres valor adicionar
base ->valor   
adicionar ->oper ID 
adicionar ->oper ID adicionar
declaracion -> T lista PC 
lista ->variable
lista ->variable , lista
inicializacion  ->variable = valor PC
valor -> NUM
valor -> palabra
valor ->( true )
valor ->( false )
condición ->parte
condición ->parte masparte
masparte ->siglogica parte
masparte ->siglogica parte masparte
parte ->NUM
parte ->CHAR
parte ->variable                                               
parte ->! variable
parte ->comparaciones                                          
comparaciones ->G sigcomp G
si ->IF ( condición ) { bloque } parteelse
parteelse ->parteelse { bloque }
parteelse ->''
parteelse ->ELSE { bloque }
mientras -> WHILE ( condición ) { bloque }
hacermientras -> DO { bloque } while ( condición ) puntocoma
